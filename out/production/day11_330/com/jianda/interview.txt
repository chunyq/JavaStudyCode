01. 类是什么？对象是什么？二者有什么关系；
类（Class）：
类是一个用户定义的引用数据类型，它通常用于描述具有相同属性和方法（或称为函数）的一组对象的特性。
类定义了对象的模板，它描述了如何创建对象以及对象能做什么。

对象（Object）：
对象是根据类创建的实例。每个对象都是类的一个具体实例，具有类定义的属性和方法。
对象占用实际的内存空间，并且具有自己的状态（即属性值）和行为（即方法）。

二者之间的关系：
类是对象的模板，它定义了对象的结构和行为。
对象是类的实例化，即根据类创建的具体实例。
通过类可以创建多个对象，每个对象都是类的一个独立实例，具有自己的属性和状态。
类和对象之间的关系类似于现实世界中的模板和具体产品的关系。


02. 为什么要使用封装？如何实现封装
面向对象开发需要遵循”高内聚、低耦合“
高内聚：类的内部数据操作细节自己完成，不允许外部干涉；
低耦合：仅暴露少量的方法给外部使用，尽量方便外部调用。
通过封装去隐藏对象的内部细节，只通过公共方法与外界联系，这可以保护对象的数据不被外部代码随意访问和修改
使得代码模块化

通过修改权限修饰符来私有化类的成员变量，提供公共的 get 和 set 方法，
对外暴露获取和修改属性的功能。

03. 为什么使用继承？继承的优点是什么？
多个类中存在相同属性和行为时，可将这些内容单独抽取到一个类中，
那么多个类中无需再定义这些属性和行为，只需要和抽取出来的类构成继承关系

优点：1、继承的出现减少了代码冗余，提高了代码的复用性。
2、继承是实现多态的基础。多态允许我们使用父类类型的引用指向子类对象，
并在运行时根据对象的实际类型调用相应的方法。这使得程序更加灵活和可扩展。

04. 抽象类是什么？接口是什么？二者有什么联系和区别？(面试题)
抽象类是一种特殊的类，它不能被实例化，并且可以包含抽象方法和具体方法。
接口则是定义了一组方法的集合，这些方法需要由实现接口的类来提供具体的实现。

共同点：
1、都不能被实例化
2、都可以包含抽象方法
3、都可以有默认实现方法（Java 8 可以用 default 关键字在接口中定义默认方法）
区别：
1、接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。
抽象类主要用于代码复用，强调的所属关系
2、一个类只能继承一个类，但是可以实现多个接口。
3、接口中的成员变量只能是 public static final 类型的，不能被修改且必须有初始值，
而抽象类的成员变量默认 default，可在子类中被重新定义，也可被重新赋值。

05. this和super的用法？
this
1、this是一个引用变量，指向当前对象
2、使用this可以解决实例变量和局部变量之间的命名冲突，
当方法的局部变量与类的实例字段同名时，可以使用 this 来引用实例字段。
3、this还可以用于构造器中调用同一个类的另一个构造器

super
1、super引用当前对象的父类
2、使用super可以调用父类的构造器、方法和属性

06. 成员变量和局部变量有哪些异同点；（理解）
相同点
都遵循相同的声明格式
不同点
1、声明位置不同，成员变量是在类中、方法外声明，局部变量在方法中或方法的参数中声明
2、存储位置不同，成员变量存放在堆内存，局部变量存放在栈内存
3、成员变量有缺省值，而局部变量没有缺省值，必须显式赋值后才能使用
4、成员变量可以用修饰符，而局部变量不能用，局部变量的作用域仅限于定义它的代码块，使用修饰符无意义

07. 重载和重写的区别？(面试题)
1、发生范围：重载在同一个类中，重写方法是子类中
2、参数列表：重载必须修改，重写不能修改
3、访问修饰符，重载无限制，重写，子类方法的访问权限应比父类方法的访问权限更大或相等
4、返回值类型：重载无限制，重写，若返回类型为void和基本数据类型，子类不可修改，若返回类型为引用类型，重写方法可以返回该引用类型的子类